// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/l99/summertime/common/chat.proto

package com.l99.summertime.common.protocol;

/**
 * <pre>
 **
 * 聊天类型
 * </pre>
 *
 * Protobuf enum {@code com.l99.summertime.common.protocol.STType}
 */
public enum STType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *未知
   * </pre>
   *
   * <code>CHAT_TYPE_UNKNOWN = 0;</code>
   */
  CHAT_TYPE_UNKNOWN(0),
  /**
   * <pre>
   *登陆
   * </pre>
   *
   * <code>CHAT_TYPE_LOGIN = 1;</code>
   */
  CHAT_TYPE_LOGIN(1),
  /**
   * <pre>
   *公聊
   * </pre>
   *
   * <code>CHAT_TYPE_PUBLIC = 2;</code>
   */
  CHAT_TYPE_PUBLIC(2),
  /**
   * <pre>
   *私聊
   * </pre>
   *
   * <code>CHAT_TYPE_PRIVATE = 3;</code>
   */
  CHAT_TYPE_PRIVATE(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *未知
   * </pre>
   *
   * <code>CHAT_TYPE_UNKNOWN = 0;</code>
   */
  public static final int CHAT_TYPE_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   *登陆
   * </pre>
   *
   * <code>CHAT_TYPE_LOGIN = 1;</code>
   */
  public static final int CHAT_TYPE_LOGIN_VALUE = 1;
  /**
   * <pre>
   *公聊
   * </pre>
   *
   * <code>CHAT_TYPE_PUBLIC = 2;</code>
   */
  public static final int CHAT_TYPE_PUBLIC_VALUE = 2;
  /**
   * <pre>
   *私聊
   * </pre>
   *
   * <code>CHAT_TYPE_PRIVATE = 3;</code>
   */
  public static final int CHAT_TYPE_PRIVATE_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static STType valueOf(int value) {
    return forNumber(value);
  }

  public static STType forNumber(int value) {
    switch (value) {
      case 0: return CHAT_TYPE_UNKNOWN;
      case 1: return CHAT_TYPE_LOGIN;
      case 2: return CHAT_TYPE_PUBLIC;
      case 3: return CHAT_TYPE_PRIVATE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<STType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      STType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<STType>() {
          public STType findValueByNumber(int number) {
            return STType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.l99.summertime.common.protocol.Chat.getDescriptor().getEnumTypes().get(0);
  }

  private static final STType[] VALUES = values();

  public static STType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private STType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.l99.summertime.common.protocol.STType)
}

